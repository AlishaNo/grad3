{"version":3,"sources":["components/GradientItem.jsx","components/App.js","serviceWorker.js","index.js"],"names":["GradientItem","props","colorSet","itemStyle","width","height","margin","backgroundImage","primary","secondary","style","regExpHexShort","RegExp","regExpHexLong","App","handleChange","target","name","value","setState","validateInputValues","handleSubmit","event","preventDefault","state","primaryColor","secondaryColor","id","_uniqueId","prevState","colorSets","isDisabled","this","isPrimaryColorValid","test","isSecondaryColorValid","className","onSubmit","placeholder","type","onChange","required","disabled","listStyle","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAmBeA,EAjBM,SAACC,GAAW,IACvBC,EAAaD,EAAbC,SAEFC,EAAY,CAChBC,MAAO,QACPC,OAAQ,QACRC,OAAQ,YACRC,gBAAgB,mBAAD,OAAqBL,EAASM,QAA9B,aAA0CN,EAASO,UAAnD,MAGjB,OACI,yBAAKC,MAAOP,GACV,4C,wBCTFQ,EAAiB,IAAIC,OAAO,oBAC5BC,EAAgB,IAAID,OAAO,oBA0FlBE,E,kDAvFb,aAAe,IAAD,8BACZ,gBASFC,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAEKF,EAAOC,GAEV,EAAKE,sBAfK,EA8BdC,aAAe,SAACC,GACdA,EAAMC,iBADkB,MAGiB,EAAKC,MAAtCC,EAHgB,EAGhBA,aAAcC,EAHE,EAGFA,eAChBxB,EAAW,CACfyB,GAAIC,MACJpB,QAASiB,EACThB,UAAWiB,GAGb,EAAKP,UAAS,SAACU,GAAD,MAAgB,CAC5BC,UAAU,GAAD,mBAAMD,EAAUC,WAAhB,CAA2B5B,IACpCuB,aAAc,GACdC,eAAgB,QAzClB,EAAKF,MAAQ,CACXC,aAAc,GACdC,eAAgB,GAChBI,UAAW,GACXC,YAAY,GANF,E,kEAmBS,IAAD,EACqBC,KAAKR,MAAtCC,EADY,EACZA,aAAcC,EADF,EACEA,eAEhBO,EACJtB,EAAeuB,KAAKT,IAAiBZ,EAAcqB,KAAKT,GACpDU,EACJxB,EAAeuB,KAAKR,IAAmBb,EAAcqB,KAAKR,GAE5DM,KAAKb,SAAS,CAAEY,WAAYE,GAAuBE,M,+BAoB3C,IACAL,EAAcE,KAAKR,MAAnBM,UACR,OACE,yBAAKM,UAAU,OAEb,0BAAMC,SAAUL,KAAKX,cACnB,+BACE,2BACEiB,YAAY,OACZrB,KAAK,eACLC,MAAOc,KAAKR,MAAMC,aAClBc,KAAK,OACLC,SAAUR,KAAKjB,aACf0B,UAAQ,KAGZ,+BACE,2BACEH,YAAY,OACZrB,KAAK,iBACLC,MAAOc,KAAKR,MAAME,eAClBa,KAAK,OACLC,SAAUR,KAAKjB,aACf0B,UAAQ,KAGZ,4BAAQC,SAAUV,KAAKR,MAAMO,WAAYQ,KAAK,UAA9C,wBAIF,wBAAI7B,MAAO,CAAEiC,UAAW,SACrBb,EAAUc,KAAI,SAAC1C,GAAD,OACb,kBAAC,EAAD,CAAc2C,IAAK3C,EAASyB,GAAIzB,SAAUA,a,GAhFpC4C,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38568763.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GradientItem = (props) => {\n  const { colorSet } = props;\n  \n  const itemStyle = {\n    width: \"300px\",\n    height: \"100px\",\n    margin: \"30px auto\",\n    backgroundImage: `linear-gradient(${colorSet.primary}, ${colorSet.secondary})`,\n  };\n  \n  return (\n      <div style={itemStyle}>\n        <button>remove</button>\n      </div>\n  );\n};\n\nexport default GradientItem;\n","import React from \"react\";\nimport GradientItem from \"./GradientItem\";\nimport \"../App.css\";\nimport _uniqueId from \"lodash/uniqueId\";\n\nconst regExpHexShort = new RegExp(/^#[0-9A-F]{3}$/gi);\nconst regExpHexLong = new RegExp(/^#[0-9A-F]{6}$/gi);\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      primaryColor: \"\",\n      secondaryColor: \"\",\n      colorSets: [],\n      isDisabled: false,\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState(\n      {\n        [name]: value,\n      },\n      this.validateInputValues\n    );\n  };\n\n  validateInputValues() {\n    const { primaryColor, secondaryColor } = this.state;\n\n    const isPrimaryColorValid =\n      regExpHexShort.test(primaryColor) && regExpHexLong.test(primaryColor);\n    const isSecondaryColorValid =\n      regExpHexShort.test(secondaryColor) && regExpHexLong.test(secondaryColor);\n\n    this.setState({ isDisabled: isPrimaryColorValid || isSecondaryColorValid });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { primaryColor, secondaryColor } = this.state;\n    const colorSet = {\n      id: _uniqueId(),\n      primary: primaryColor,\n      secondary: secondaryColor,\n    };\n\n    this.setState((prevState) => ({\n      colorSets: [...prevState.colorSets, colorSet],\n      primaryColor: \"\",\n      secondaryColor: \"\",\n    }));\n  };\n\n  render() {\n    const { colorSets } = this.state;\n    return (\n      <div className=\"App\">\n    \n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              placeholder=\"hex1\"\n              name=\"primaryColor\"\n              value={this.state.primaryColor}\n              type=\"text\"\n              onChange={this.handleChange}\n              required\n            />\n          </label>\n          <label>\n            <input\n              placeholder=\"hex2\"\n              name=\"secondaryColor\"\n              value={this.state.secondaryColor}\n              type=\"text\"\n              onChange={this.handleChange}\n              required\n            />\n          </label>\n          <button disabled={this.state.isDisabled} type=\"submit\">\n            Add Gradient master\n          </button>\n        </form>\n        <ul style={{ listStyle: \"none\" }}>\n          {colorSets.map((colorSet) => (\n            <GradientItem key={colorSet.id} colorSet={colorSet} />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/GradientItem.jsx","components/App.js","serviceWorker.js","index.js"],"names":["GradientItem","props","inputValueSecond","inputValueFirst","isSubmitted","itemStyle","width","height","margin","backgroundImage","console","log","style","App","handleChange","event","setState","target","name","value","regExpHexShort","RegExp","regExpHexLong","test","handleSubmit","preventDefault","arrayVar","state","itemsList","push","deleteItem","isDisabled","this","items","map","item","index","key","className","onSubmit","placeholder","type","onChange","required","disabled","listStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAsBeA,EApBM,SAAAC,GAE0CA,EAAnDC,iBAAmDD,EAAjCE,gBAAiCF,EAAhBG,YAFhB,IAIrBC,EAAY,CACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,YACRC,gBAAgB,mBAAD,OAAqBR,EAAME,gBAA3B,aAA+CF,EAAMC,iBAArD,MAKnB,OAFAQ,QAAQC,IAAI,SAAUV,EAAOI,GAGzB,yBAAKO,MAAOP,GACR,mCACA,4CCqFGQ,G,wDAjGX,aAAe,IAAD,8BACV,gBAUJC,aAAe,SAAAC,GAEX,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,QAItC,IAAMC,EAAiB,IAAIC,OAAO,oBAC5BC,EAAgB,IAAID,OAAO,oBAE3BD,EAAeG,KAAKR,EAAME,OAAOE,QAAUG,EAAcC,KAAKR,EAAME,OAAOE,OAM7ET,QAAQC,IAAI,SAAUI,EAAME,OAAOE,OAFnCT,QAAQC,IAAI,YAAaI,EAAME,OAAOE,QAzBhC,EA+CdK,aAAe,SAACT,GACZA,EAAMU,iBACN,IAAMC,EAAW,EAAKC,MAAMC,UAC5BF,EAASG,KAAK,kBAAC,EAAD,CAAc1B,gBAAmB,EAAKwB,MAAMxB,gBAC9BD,iBAAoB,EAAKyB,MAAMzB,iBAC/B4B,WAAc,EAAKA,cAE/C,EAAKd,SAAS,CACVZ,aAAa,EACbwB,UAAWF,KAtDf,EAAKC,MAAQ,CACTxB,gBAAiB,GACjBD,iBAAkB,GAClBE,aAAa,EACb2B,YAAY,EACZH,UAAW,IAPL,E,qDAmEVlB,QAAQC,IAAI,aAAcqB,KAAKL,MAAMC,WAErC,IAAMK,EAAQD,KAAKL,MAAMC,UAAUM,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GAAQD,MACzE,OACI,yBAAKG,UAAU,OACX,0BAAMC,SAAUP,KAAKR,cACjB,+BAAO,2BAAOgB,YAAY,OACZtB,KAAK,kBACLC,MAAOa,KAAKL,MAAMxB,gBAClBsC,KAAK,OACLC,SAAUV,KAAKlB,aACf6B,UAAQ,KAEtB,+BAAO,2BAAOH,YAAY,OACZtB,KAAK,mBACLC,MAAOa,KAAKL,MAAMzB,iBAClBuC,KAAK,OACLC,SAAUV,KAAKlB,aACf6B,UAAQ,KAEtB,4BAAQC,SAAUZ,KAAKL,MAAMI,WAAYU,KAAK,UAA9C,iBAEJ,wBAAI7B,MAAS,CAACiC,UAAW,SACpBZ,Q,GA3FHa,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.907440a5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GradientItem = props => {\n\n    const { inputValueSecond, inputValueFirst, isSubmitted } = props;\n\n    const itemStyle = {\n        width: \"300px\",\n        height: \"100px\",\n        margin: \"30px auto\",\n        backgroundImage: `linear-gradient(${props.inputValueFirst}, ${props.inputValueSecond})`\n    };\n\n    console.log('props ', props, itemStyle);\n\n    return (\n        <div style={itemStyle}>\n            <p>lolo</p>\n            <button>remove</button>\n        </div>\n    )};\n\nexport default GradientItem;\n","\nimport React from 'react';\nimport GradientItem from \"./GradientItem\";\nimport '../App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            inputValueFirst: '',//сюда должны получать значение из инпута\n            inputValueSecond: '',//сюда должны получать значение из инпута\n            isSubmitted: false,\n            isDisabled: false,\n            itemsList: []\n        };\n    }\n\n    handleChange = event => {\n        //console.log('input ', event.target.value);\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n        // const { inputValueFirst, inputValueSecond } = this.state;\n\n        const regExpHexShort = new RegExp(/^#[0-9A-F]{3}$/gi);\n        const regExpHexLong = new RegExp(/^#[0-9A-F]{6}$/gi);\n        // console.log('input ', [event.target.name],event.target.value, );\n        if (!(regExpHexShort.test(event.target.value) || regExpHexLong.test(event.target.value))) {\n            // if(!(regExpHexShort.test(event.target.value) || regExpHexLong.test(event.target.value))) {\n            //\n            // }\n            console.log('not valid', event.target.value)\n        } else {\n            console.log(' valid', event.target.value);\n            // this.setState ({\n            //     isDisabled: !this.state.isDisabled\n            // })\n        }\n    };\n\n    // validate = () => {\n    //     let inputError = '';\n    // };\n\n    // deleteItem = item => {\n    //     const updateItemsList = this.state.itemsList.filter(function (item) {\n    //         return item.id !== movie.id;\n    //     });\n    //     console.log('updateItemsList', updateItemsList);\n    //     this.setState ({\n    //         itemsList: updateItemsList\n    //     });\n    // };\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const arrayVar = this.state.itemsList;\n        arrayVar.push(<GradientItem inputValueFirst = {this.state.inputValueFirst}\n                                    inputValueSecond = {this.state.inputValueSecond}\n                                    deleteItem = {this.deleteItem}/>);\n\n        this.setState({\n            isSubmitted: true,\n            itemsList: arrayVar\n            // itemsArray: [...this.state.itemsArray, {GradientItem}]\n        })\n\n        //  const isValid = this.validate();\n        // if (isValid) {\n        //     console.log(this.state);\n        // }\n    };\n\n    render() {\n        console.log('itemsArray', this.state.itemsList);\n        //console.log('changed', this, this.state, this.state.inputValueFirst, this.state.inputValueSecond);\n        const items = this.state.itemsList.map((item, index) => <li key={index}>{item}</li>);\n        return (\n            <div className=\"App\">\n                <form onSubmit={this.handleSubmit}>\n                    <label><input placeholder=\"hex1\"\n                                  name=\"inputValueFirst\"\n                                  value={this.state.inputValueFirst}\n                                  type=\"text\"\n                                  onChange={this.handleChange}\n                                  required/>\n                    </label>\n                    <label><input placeholder=\"hex2\"\n                                  name=\"inputValueSecond\"\n                                  value={this.state.inputValueSecond}\n                                  type=\"text\"\n                                  onChange={this.handleChange}\n                                  required/>\n                    </label>\n                    <button disabled={this.state.isDisabled} type=\"submit\">Add Gradient</button>\n                </form>\n                <ul style = {{listStyle: 'none'}}>\n                    {items}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}